Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-30T17:29:14-04:00

====== ipfs ======
Created Saturday 30 October 2021


=== Running IPFS inside Docker ===

An IPFS docker image is hosted at hub.docker.com/r/ipfs/go-ipfs. To make files visible inside the container you need to mount a host directory with the -v option to docker. Choose a directory that you want to use to import/export files from IPFS. You should also choose a directory to store IPFS files that will persist when you restart the container.

{{{code: lang="sh" linenumbers="False"
export ipfs_staging=</absolute/path/to/somewhere/>
export ipfs_data=</absolute/path/to/somewhere_else/>

}}}

Start a container running ipfs and expose ports 4001, 5001 and 8080:

{{{code: lang="sh" linenumbers="False"
docker run -d --name ipfs_host -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 4001:4001 -p 127.0.0.1:8080:8080 -p 127.0.0.1:5001:5001 ipfs/go-ipfs:latest
}}}


Watch the ipfs log:

{{{code: lang="sh" linenumbers="False"
docker logs -f ipfs_host
}}}


Wait for ipfs to start. ipfs is running when you see:
{{{code: lang="sh" linenumbers="False"
Gateway (readonly) server
listening on /ip4/0.0.0.0/tcp/8080

}}}

You can now stop watching the log.

Run ipfs commands:
{{{code: lang="sh" linenumbers="False"
docker exec ipfs_host ipfs <args...>
}}}


For example: connect to peers
{{{code: lang="sh" linenumbers="False"
docker exec ipfs_host ipfs swarm peers
}}}


Add files:
{{{code: lang="sh" linenumbers="False"
cp -r <something> $ipfs_staging
docker exec ipfs_host ipfs add -r /export/<something>

}}}

Stop the running container:

{{{code: lang="sh" linenumbers="False"
docker stop ipfs_host
}}}


When starting a container running ipfs for the first time with an empty data directory, it will call ipfs init to initialize configuration files and generate a new keypair. At this time, you can choose which profile to apply using the IPFS_PROFILE environment variable:
{{{code: lang="sh" linenumbers="False"
docker run -d --name ipfs_host -e IPFS_PROFILE=server -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 4001:4001 -p 127.0.0.1:8080:8080 -p 127.0.0.1:5001:5001 ipfs/go-ipfs:latest
}}}


It is possible to initialize the container with a swarm key file (/data/ipfs/swarm.key) using the variables IPFS_SWARM_KEY and IPFS_SWARM_KEY_FILE. The IPFS_SWARM_KEY creates swarm.key with the contents of the variable itself, whilst IPFS_SWARM_KEY_FILE copies the key from a path stored in the variable. The IPFS_SWARM_KEY_FILE overwrites the key generated by IPFS_SWARM_KEY.
{{{code: lang="sh" linenumbers="False"
docker run -d --name ipfs_host -e IPFS_SWARM_KEY=<your swarm key> -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 4001:4001 -p 127.0.0.1:8080:8080 -p 127.0.0.1:5001:5001 ipfs/go-ipfs:latest
}}}


The swarm key initialization can also be done using docker secrets (requires docker swarm or docker-compose):
{{{code: lang="sh" linenumbers="False"
cat your_swarm.key | docker secret create swarm_key_secret -

docker run -d --name ipfs_host --secret swarm_key_secret -e IPFS_SWARM_KEY_FILE=/run/secrets/swarm_key_secret -v $ipfs_staging:/export -v $ipfs_data:/data/ipfs -p 4001:4001 -p 127.0.0.1:8080:8080 -p 127.0.0.1:5001:5001 ipfs/go-ipfs:latest

}}}

