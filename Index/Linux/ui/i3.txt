Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-07-04T03:01:23-04:00

====== i3 ======
Created Monday 04 July 2022

====== window positions ======

https://www.reddit.com/r/i3wm/comments/mrdsvs/make_windows_open_at_specific_workspace_position/gv34a78?utm_source=share&utm_medium=web2x&context=3

# Get coordinates and geometry from xwininfo

for_window [class="^zoom$"] move container to workspace $ws4, workspace $ws4, floating enable

for_window [class="^zoom$" instance="^zoom$" title="^Zoom Meeting$"] floating enable, move position 3453 px 1330 px, resize set 1486 px 1166 px

for_window [class="^zoom$" instance="^zoom$" title="^Zoom - Licensed Account$"] floating enable, move position 4954 px 1330 px, resize set 392 px 483 px

for_window [class="^zoom$" instance="^zoom$" title="^Chat$"] floating enable, move position 4738 px 1830 px, resize set 596 px 600 px


@i3 @layouts
https://gideonwolfe.com/posts/workflow/i3/layouts/


====== Save and restore the window layout ======


$ i3-save-tree --workspace N > ~/.config/i3/workspace_N.json

where N is the number of the preferred workspace. This will save the current layout of workspace N to the file ~/.config/i3/workspace_N.json.

The newly created file needs to be edited. This may be done automatically with the following command:
$ sed -i 's|^\(\s*\)// "|\1"|g; /^\s*\/\//d' ~/.config/i3/workspace_N.json

Restore the window layout of the workspace

There are two ways to restore the layout of the workspace: by writing a script, or by editing ~/.config/i3/config to automatically load the layout. 

To restore the saved layout in the previous section, write a file named load_layout.sh with the following contents:

The starting lines:

~/load_layout.sh
#!/bin/sh
i3-msg "workspace M; append_layout ~/.config/i3/workspace_N.json"

where M is the number of the workspace in which you would like to load the previously saved layout and N is the number of workspaces saved in the previous section.

And the commands used in the previous section to get the preferred windows, but enclosed in parentheses and with an ampersand appended before the last parentheses.
For example, if the saved layout contained three uxterm windows:

~/load_layout.sh
#!/bin/sh

# First we append the saved layout of workspace N to workspace M
i3-msg "workspace M; append_layout ~/.config/i3/workspace_N.json"

# And finally we fill the containers with the programs they had
(uxterm &)
(uxterm &)
(uxterm &)
Then set the file as executable. Finally, the layout of workspace N can be loaded onto to workspace M by running:

$ ~/load_layout.sh

Tip: Adding bindsym $mod+g exec ~/load_layout.sh to ~/.config/i3/config and restarting i3 will bind Mod+g to run the above script.
Note: If the above script does not work properly, refer to the official documentation. The swallows sections of ~/.config/i3/workspace_N.json needs to be manually edited.

===== 4. Troubleshooting =====

4.1. Restoring a vertically split workspace
When using i3-save-tree with the --workspace switch, only the contents of the workspace will be dumped. This means that properties of the workspace itself will be lost.

This is relevant for, e.g., a vertically split container as the base container of a workspace. Since the split mode is a property of the workspace, it will not be stored. In this case, you will have to manually wrap your layout in such a container:

{{{code: lang="json" linenumbers="False"
// vim:ts=4:sw=4:et
{
	// this is a manually added container to restore the vertical split
	"layout": "splitv",
	"percent": 0.5,
	"type": "con",
	"nodes": [

		// the dumped workspace layout goes here

	]
}
}}}


